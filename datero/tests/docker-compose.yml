services:
  mysql:
    image: docker.io/mysql:latest
    container_name: datero_src_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: finance
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
    ports:
      - 3306:3306
    volumes:
      - ./mysql/customers.sql:/docker-entrypoint-initdb.d/setup.sql

  postgres:
    image: docker.io/postgres:latest
    container_name: datero_src_postgres
    environment:
      POSTGRES_DB: factory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - ./postgres/products.sql:/docker-entrypoint-initdb.d/setup.sql

  mongo:
    image: docker.io/mongo:latest
    container_name: datero_src_mongo
    environment:
      MONGO_INITDB_DATABASE: sales
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - 27017:27017
    volumes:
      - ./mongo/orders.js:/docker-entrypoint-initdb.d/setup.js

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: datero_src_mssql
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Mssql_2019
    ports:
      - 1433:1433
    entrypoint:
      - /usr/config/entrypoint.sh
    volumes:
      - ./mssql/entrypoint.sh:/usr/config/entrypoint.sh
      - ./mssql/configure_db.sh:/usr/config/configure-db.sh
      - ./mssql/employees.sql:/usr/config/setup.sql

  redis:
    image: docker.io/redis:latest
    container_name: datero_src_redis
    ports:
      - 6379:6379

  redis_seed:
    image: docker.io/redis:latest
    container_name: redis_seed
    volumes:
      - ./redis/users.sh:/usr/local/bin/load_data.sh
    depends_on:
      - redis
    command: sh -c "chmod +x /usr/local/bin/load_data.sh && /usr/local/bin/load_data.sh"

  oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    container_name: datero_src_oracle
    environment:
      ORACLE_PWD: admin   # password for SYS, SYSTEM and PDBADMIN
    ports:
      - 1521:1521   # JDBC
      - 5500:5500   # Enterprise Manager GUI
    volumes:
      - ./oracle/customer_profiles.sql:/docker-entrypoint-initdb.d/startup/oracle_setup.sql
    healthcheck:
      test: ["CMD-SHELL", "echo 'SELECT COUNT(*) FROM customer_profiles; exit;' | sqlplus oracle/oracle@//localhost:1521/xepdb1"]
      interval: 1m
      timeout: 5s
      start_interval: 2s
      start_period: 15s
      retries: 3

  datero:
    image: docker.io/chumaky/datero_engine:17.6
    #image: docker.io/chumaky/datero:latest
    container_name: datero_test_engine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 4444:5432
      - 80:80
    volumes:
      # sqlite_fdw
      - ./sqlite:/data/sqlite
      # file_fdw
      - ./csv/departments.csv:/data/departments.csv
      # duckdb_fdw
      - ../../tests/duckdb/file1.json:/home/data/file1.json
      - ../../tests/duckdb/file2.json:/home/data/file2.json
      - ../../tests/duckdb/json_files.duckdb:/home/data/json_files.duckdb
      #- ../../tests/duckdb/json_files.duckdb.wal:/home/data/json_files.duckdb.wal
      # datero setup
      - ./datero_setup.sql:/data/datero_setup.sql      
      - ./config.yaml:/home/instance/config.yaml   
      # TODO: implement waiting of the source services actually being ready via "wait-for-it.sh"
      # and run `datero_setup.sql` after that
      # - ./datero_setup.sql:/docker-entrypoint-initdb.d/datero_setup.sql         
    depends_on:
      mysql:
        condition: service_started
      postgres:
        condition: service_started
      mongo:
        condition: service_started
      mssql:
        condition: service_started
      oracle:
        condition: service_healthy
      redis:
        condition: service_started
